<?php
/**
	Auto generated by xproto.exe
@author
	Dany
*/

require_once ($GLOBALS['GAME_ROOT']."log/Logger.php");
require_once($GLOBALS['GAME_ROOT']."protocol/XByteArray.php");
require_once($GLOBALS['GAME_ROOT']."protocol/proxy_idl.php");
require_once($GLOBALS['GAME_ROOT']."protocol/game_idl.php");
require_once($GLOBALS['GAME_CLIENT_ROOT']."ServerGateway.php");
		
class GameProtocolServer 
{
		
		public	$_m_bOutputNetworkDetails	= true;
		
    public  $useAMF = false;
    
		private static $_s_OpHandlers=  array(
			"_NullActionHandler","_NullActionHandler",

			"CMSG_DoLogin","_OnDoLogin",
			"CMSG_SendInternalNotifyByProxy","_OnInternalNotifyByProxy",
			"CMSG_OnKickout","_OnKickout",
			"CMSG_SendPing","_OnPing",
			"CMSG_SendProtoBuff","_OnProtoBuff",

		);
    
    
		private static $_s_SendOpcodeNames = array(
			0=>"_NullAction",

			0x00000001=>"SMSG_OnServerErrorMessage",
			0x00000002=>"SMSG_OnSendZipData",
			0x0000002E=>"SMSG_OnPong",
			0x0000002F=>"SMSG_OnProtoReponse",

		);	

    private $_s_msg_index_map= array(

		0x00000001=>1,
		0x0000000C=>2,
		0x00000019=>3,
		0x00000022=>4,
		0x00000023=>5,
    );
    
    private function get_index_of_msg($msg)
    {
       if(!array_key_exists($msg,$this->_s_msg_index_map))
       {
          return 0;
       }
       return $this->_s_msg_index_map[$msg] ;
    }
        
		private function OutputNetworkDetails($bSend, $cmd, $data)
		{
			
		}
	
		
		private static function _NullActionHandler($data/*:XByteArray*/)
		{
			echo __FILE__.__LINE__."FATAL ERROR, SHOULD NEVER BE HERE.... _NullActionHandler";
			return XPROTO_ERROR_CODE::XPROTO_XCMD_OUT_OF_RANGE;;
		}
		
		
		
		public function HandleReceivedData($data)/*:int*/
		{
				$br = new XByteArray();
				$br->set_data($data);
				if($br->getBytesAvailable()<8)
				{
					  return XPROTO_ERROR_CODE::XPROTO_PACKET_LESS_THAN_HDRLEN;
				}
        
				while($br->getBytesAvailable()>=8)
				{
					$savePos = $br->position;
					$len = $br->readInt32();
					$cmd = $br->readInt32();
	        
					if($len>$br->length)
					{
					    return XPROTO_ERROR_CODE::XPROTO_PACKET_LENGTH_OVERFLOW;
					}
          
					if($cmd<=0 || $cmd> _EMSG_ServerInterface::CMSG_MAX || $cmd < _EMSG_ServerInterface::CMSG_DoLogin)
					{
					    return XPROTO_ERROR_CODE::XPROTO_XCMD_OUT_OF_RANGE;
					}
					
					$br->position = $savePos;
          
					$msg_idx = $this->get_index_of_msg($cmd);
					if($msg_idx<=0)
					{
						return XPROTO_ERROR_CODE::XPROTO_XCMD_OUT_OF_RANGE;  
					}
          
					/**
					 * make sure the action is valid
					 */
					$action  = GameProtocolServer::$_s_OpHandlers[2*$msg_idx];	
					if (!$this->CheckValidAction($action, $msg_idx))
					{
						return XPROTO_ERROR_CODE::XPROTO_CONNECTION_STATE_CHECK_FAILED;						
					}				
						
					$func = GameProtocolServer::$_s_OpHandlers[1+2*$msg_idx];					
					$ret = $this->$func($br);
					if($ret<0)
					{
					    return $ret;
					}
				}
				
				if($br->getBytesAvailable()!=0)
				{
					echo __FILE__." line:".__LINE__." FATAL ERROR, PROTOFAILED dump:".BytesToString($data,strlen($data),' ');
					return XPROTO_ERROR_CODE::XPROTO_REMAIN_LENGTH_ERROR;
				}
				
				return XPROTO_ERROR_CODE::XPROTO_SUCCEED;
		}
		
		public function DispatchReceivedPacket()/*:int*/
		{
				return 0;
					
		} 
		
		function WriteDataToSocket($data/*:XByteArray*/)/*:int*/
		{
			$ret = post_to_server($data->raw_data);	
			if(is_string($ret)){
				$this->HandleReceivedData($ret);
			}		
		}
		
		public function CheckValidAction($action/*:string*/, $msgId/*INT*/)/*:bool*/
		{
			return true;
		}
		
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		


		private function _OnDoLogin($__src)
		{
			//require_once("XPACKET_DoLogin.php");
			$pPacket  =  new XPACKET_DoLogin();
			
			if(!$this->useAMF)
			{
				$__len		= $__src->getBytesAvailable();
				if ($pPacket->FromBuffer($__src) == -1)
				{
					return -1;
				}
							
				if (DEBUG)
				{
				    Logger::getLogger()->debug("OnDoLogin".$pPacket->ToDebugString());
				}
				
				return $this->OnDoLogin($pPacket);			
			}
			else
			{
				

				$obj = ReadAMF3Object($__src);
				$pPacket->fromAMFObject($obj);
				
				if (DEBUG)
				{
				    Logger::getLogger()->debug("OnDoLogin".$pPacket->ToDebugString());
				}

				return $this->OnDoLogin($pPacket);
			}


		}

		private function _OnInternalNotifyByProxy($__src)
		{
			//require_once("XPACKET_SendInternalNotifyByProxy.php");
			$pPacket  =  new XPACKET_SendInternalNotifyByProxy();
			
			if(!$this->useAMF)
			{
				$__len		= $__src->getBytesAvailable();
				if ($pPacket->FromBuffer($__src) == -1)
				{
					return -1;
				}
							
				if (DEBUG)
				{
				    Logger::getLogger()->debug("OnInternalNotifyByProxy".$pPacket->ToDebugString());
				}
				
				return $this->OnInternalNotifyByProxy($pPacket);			
			}
			else
			{
				

				$obj = ReadAMF3Object($__src);
				$pPacket->fromAMFObject($obj);
				
				if (DEBUG)
				{
				    Logger::getLogger()->debug("OnInternalNotifyByProxy".$pPacket->ToDebugString());
				}

				return $this->OnInternalNotifyByProxy($pPacket);
			}


		}

		private function _OnKickout($__src)
		{
			//require_once("XPACKET_OnKickout.php");
			$pPacket  =  new XPACKET_OnKickout();
			
			if(!$this->useAMF)
			{
				$__len		= $__src->getBytesAvailable();
				if ($pPacket->FromBuffer($__src) == -1)
				{
					return -1;
				}
							
				if (DEBUG)
				{
				    Logger::getLogger()->debug("OnKickout".$pPacket->ToDebugString());
				}
				
				return $this->OnKickout($pPacket);			
			}
			else
			{
				

				$obj = ReadAMF3Object($__src);
				$pPacket->fromAMFObject($obj);
				
				if (DEBUG)
				{
				    Logger::getLogger()->debug("OnKickout".$pPacket->ToDebugString());
				}

				return $this->OnKickout($pPacket);
			}


		}

		private function _OnPing($__src)
		{
			//require_once("XPACKET_SendPing.php");
			$pPacket  =  new XPACKET_SendPing();
			
			if(!$this->useAMF)
			{
				$__len		= $__src->getBytesAvailable();
				if ($pPacket->FromBuffer($__src) == -1)
				{
					return -1;
				}
							
				if (DEBUG)
				{
				    Logger::getLogger()->debug("OnPing".$pPacket->ToDebugString());
				}
				
				return $this->OnPing($pPacket);			
			}
			else
			{
				

				$obj = ReadAMF3Object($__src);
				$pPacket->fromAMFObject($obj);
				
				if (DEBUG)
				{
				    Logger::getLogger()->debug("OnPing".$pPacket->ToDebugString());
				}

				return $this->OnPing($pPacket);
			}


		}

		private function _OnProtoBuff($__src)
		{
			//require_once("XPACKET_SendProtoBuff.php");
			$pPacket  =  new XPACKET_SendProtoBuff();
			
			if(!$this->useAMF)
			{
				$__len		= $__src->getBytesAvailable();
				if ($pPacket->FromBuffer($__src) == -1)
				{
					return -1;
				}
							
				if (DEBUG)
				{
				    Logger::getLogger()->debug("OnProtoBuff".$pPacket->ToDebugString());
				}
				
				return $this->OnProtoBuff($pPacket);			
			}
			else
			{
				

				$obj = ReadAMF3Object($__src);
				$pPacket->fromAMFObject($obj);
				
				if (DEBUG)
				{
				    Logger::getLogger()->debug("OnProtoBuff".$pPacket->ToDebugString());
				}

				return $this->OnProtoBuff($pPacket);
			}


		}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


		public function SendServerErrorMessage($error_code/*:INT*/ ,$lpszMsg/*:string utf-8*/ )
		{
			//require_once("XPACKET_OnServerErrorMessage.php");
			$__xvpacketlen/*:int*/ = XPACKET_OnServerErrorMessage::_Size($error_code/*:INT*/ ,$lpszMsg/*:string utf-8*/ );
			$__xvbuf	= new XByteArray();
			//$__xvbuf->reserve($__xvpacketlen);
			
			
			$__xvres/*:int*/ = 0;
			
			if (DEBUG)
			{
			   $c = XPACKET_OnServerErrorMessage::_ClassFromParameters($error_code/*:INT*/ ,$lpszMsg/*:string utf-8*/ );
			   Logger::getLogger()->debug("SendServerErrorMessage".$c->ToDebugString());
			}
			
			if($this->useAMF)
			{
				$__xvres = XPACKET_OnServerErrorMessage::toAMFObject($__xvbuf,$error_code/*:INT*/ ,$lpszMsg/*:string utf-8*/ );
			}
			else
			{
				$__xvres = XPACKET_OnServerErrorMessage::_ToBuffer($__xvbuf,$error_code/*:INT*/ ,$lpszMsg/*:string utf-8*/ );
				if($__xvres !=$__xvpacketlen)
				{
					return -1;
				}
				if($this->_m_bOutputNetworkDetails)
				{
					$this->OutputNetworkDetails(true,XPACKET_OnServerErrorMessage::$_m_xcmd,$__xvbuf);
				}
			
			
			}

			$__xvres = $this->WriteDataToSocket($__xvbuf);
			return $__xvres;
		}


		public function SendSendZipData($zipData/*:UCHAR[] */ )
		{
			//require_once("XPACKET_OnSendZipData.php");
			$__xvpacketlen/*:int*/ = XPACKET_OnSendZipData::_Size($zipData/*:UCHAR[] */ );
			$__xvbuf	= new XByteArray();
			//$__xvbuf->reserve($__xvpacketlen);
			
			
			$__xvres/*:int*/ = 0;
			
			if (DEBUG)
			{
			   $c = XPACKET_OnSendZipData::_ClassFromParameters($zipData/*:UCHAR[] */ );
			   Logger::getLogger()->debug("SendSendZipData".$c->ToDebugString());
			}
			
			if($this->useAMF)
			{
				$__xvres = XPACKET_OnSendZipData::toAMFObject($__xvbuf,$zipData/*:UCHAR[] */ );
			}
			else
			{
				$__xvres = XPACKET_OnSendZipData::_ToBuffer($__xvbuf,$zipData/*:UCHAR[] */ );
				if($__xvres !=$__xvpacketlen)
				{
					return -1;
				}
				if($this->_m_bOutputNetworkDetails)
				{
					$this->OutputNetworkDetails(true,XPACKET_OnSendZipData::$_m_xcmd,$__xvbuf);
				}
			
			
			}

			$__xvres = $this->WriteDataToSocket($__xvbuf);
			return $__xvres;
		}


		public function SendPong($time/*:string utf-8*/ )
		{
			//require_once("XPACKET_OnPong.php");
			$__xvpacketlen/*:int*/ = XPACKET_OnPong::_Size($time/*:string utf-8*/ );
			$__xvbuf	= new XByteArray();
			//$__xvbuf->reserve($__xvpacketlen);
			
			
			$__xvres/*:int*/ = 0;
			
			if (DEBUG)
			{
			   $c = XPACKET_OnPong::_ClassFromParameters($time/*:string utf-8*/ );
			   Logger::getLogger()->debug("SendPong".$c->ToDebugString());
			}
			
			if($this->useAMF)
			{
				$__xvres = XPACKET_OnPong::toAMFObject($__xvbuf,$time/*:string utf-8*/ );
			}
			else
			{
				$__xvres = XPACKET_OnPong::_ToBuffer($__xvbuf,$time/*:string utf-8*/ );
				if($__xvres !=$__xvpacketlen)
				{
					return -1;
				}
				if($this->_m_bOutputNetworkDetails)
				{
					$this->OutputNetworkDetails(true,XPACKET_OnPong::$_m_xcmd,$__xvbuf);
				}
			
			
			}

			$__xvres = $this->WriteDataToSocket($__xvbuf);
			return $__xvres;
		}


		public function SendProtoReponse($data/*:UCHAR[] */ )
		{
			//require_once("XPACKET_OnProtoReponse.php");
			$__xvpacketlen/*:int*/ = XPACKET_OnProtoReponse::_Size($data/*:UCHAR[] */ );
			$__xvbuf	= new XByteArray();
			//$__xvbuf->reserve($__xvpacketlen);
			
			
			$__xvres/*:int*/ = 0;
			
			if (DEBUG)
			{
			   $c = XPACKET_OnProtoReponse::_ClassFromParameters($data/*:UCHAR[] */ );
			   Logger::getLogger()->debug("SendProtoReponse".$c->ToDebugString());
			}
			
			if($this->useAMF)
			{
				$__xvres = XPACKET_OnProtoReponse::toAMFObject($__xvbuf,$data/*:UCHAR[] */ );
			}
			else
			{
				$__xvres = XPACKET_OnProtoReponse::_ToBuffer($__xvbuf,$data/*:UCHAR[] */ );
				if($__xvres !=$__xvpacketlen)
				{
					return -1;
				}
				if($this->_m_bOutputNetworkDetails)
				{
					$this->OutputNetworkDetails(true,XPACKET_OnProtoReponse::$_m_xcmd,$__xvbuf);
				}
			
			
			}

			$__xvres = $this->WriteDataToSocket($__xvbuf);
			return $__xvres;
		}



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public function OnDoLogin($pPacket/*XPACKET_DoLogin*/)/*:int*/
		{
		    return 0;
		}
		public function OnInternalNotifyByProxy($pPacket/*XPACKET_SendInternalNotifyByProxy*/)/*:int*/
		{
		    return 0;
		}
		public function OnKickout($pPacket/*XPACKET_OnKickout*/)/*:int*/
		{
		    return 0;
		}
		public function OnPing($pPacket/*XPACKET_SendPing*/)/*:int*/
		{
		    return 0;
		}
		public function OnProtoBuff($pPacket/*XPACKET_SendProtoBuff*/)/*:int*/
		{
		    return 0;
		}

}

?>
