<?php
/**
	Auto generated by xproto.exe
@author
	Dany
*/
require_once("XByteArray.php");



	class PROXY_TARGET_LOCAL 
	{
		
	    
		public $PROXY_ID/*:string utf-8*/="";
		public $SOCKET_ID =array();/*STRINGA[]*/

	    
		public function PROXY_TARGET_LOCAL()
		{

		}
		
		public  function FromBuffer($__src/*:XByteArray*/)
		{
			$__xv  = 0;
			$i		 = 0;
			$__xvBeanSize=0;


            //Read codes of PROXY_ID
            //
            $__PROXY_ID_szSize	= new XInteger();
            $this->PROXY_ID =XByteArray::ReadStringA($__src,$__PROXY_ID_szSize);
            if($__PROXY_ID_szSize->_value<=0) 
                return 0;
            $__xv +=$__PROXY_ID_szSize->_value;

            //read codes of SOCKET_ID
            //
            $__SOCKET_ID_arrlen	= new XInteger();
            $__xv +=XByteArray::ReadDynamicArrayLength($__src,$__SOCKET_ID_arrlen);
            if($__SOCKET_ID_arrlen->_value<0)
            {
                return 0;
            }
            $this->SOCKET_ID =array();
            for($i=0;$i<$__SOCKET_ID_arrlen->_value;$i++)
            {
                 $__SOCKET_ID_szSize = new XInteger();
                 $__xvstrtemp =XByteArray::ReadStringA($__src,$__SOCKET_ID_szSize);
                 if($__SOCKET_ID_szSize->_value<=0) 
                 		return 0;
                 $__xv +=$__SOCKET_ID_szSize->_value;
                 array_push($this->SOCKET_ID,$__xvstrtemp);
            }

			return $__xv;
		}
		
		public  function ToBuffer($__dst/*:XByteArray*/)
		{
			$__xv= 0;
			$i=0;


            //Write codes of this->PROXY_ID
            //
             $__xv += XByteArray::WriteStringA($__dst, $this->PROXY_ID);

            //Write codes of this->SOCKET_ID
            //
            $__num = count($this->SOCKET_ID);
            $__xv +=XByteArray::WriteDynamicArrayLength($__dst,$__num);
            for($i=0;$i<$__num;$i++)
            {
                $__xv +=XByteArray::WriteStringA($__dst,$this->SOCKET_ID[$i]);
            }

			return $__xv;
		}
		
		public  function Size()
		{
			$__xv	= 0;
			$i	=0;

            $__xv +=XByteArray::StringASize($this->PROXY_ID);
            $__xv += 4; //XByteArray::GetDynamicLengthNumBytes(SOCKET_ID.length);
            foreach($this->SOCKET_ID as $_elem) $__xv +=XByteArray::StringASize($_elem);

			return $__xv;
		}
   
    public  function FromXml(/*XP_XMLNODE_PTR*/ $pNode)
    {

        $this->PROXY_ID = XFROM_XML($this->PROXY_ID,$pNode,"PROXY_ID",2,"");
        $this->SOCKET_ID = XFROM_XML($this->SOCKET_ID,$pNode,"SOCKET_ID",5,"",2);

		  	return $this;
    }
    
    public  function   ToXml(/*XSTRING_STREAM & out*/)
    {
        $__xv_out="";

        $__xv_out .= XTO_XML($this->PROXY_ID,"PROXY_ID",2, 0);
        $__xv_out .= XTO_XML($this->SOCKET_ID,"SOCKET_ID",5, 2);

        return $__xv_out;
    }

    public   function fromAMFObject($pNode)
    {
        
        $this->PROXY_ID = XFROM_AMFOBJECT($this->PROXY_ID,$pNode,"PROXY_ID",2,"");
        $this->SOCKET_ID = XFROM_AMFOBJECT($this->SOCKET_ID,$pNode,"SOCKET_ID",5,"",2);

        return 0;
    }
    
    private static function ParamDebugString($param)
    {
    	if (is_object($param))
    	{
    		return $param->ToDebugString();
    	}
    	else if (is_array($param))
    	{
    		$str = "(";
    		foreach($param as $p)
    		{
    			if( is_object($p) )
    			{
    				$str .= $p->ToDebugString().",";
			}
			else
			{
				$str .= strval($p).",";
			}
    		}
    		$str .= ")";
    		$str = str_replace(",)",")",$str);
    		return $str;
    	}
    	
    	return strval($param);
    } 
    
	public  function ToDebugString()
    {
    	$__xv_out  = "(";
    	
        $__xv_out .= "PROXY_ID=".$this->ParamDebugString($this->PROXY_ID).",";
        $__xv_out .= "SOCKET_ID=".$this->ParamDebugString($this->SOCKET_ID).",";

    	
    	$__xv_out  .= ")";
    	
    	$__xv_out = str_replace(",)",")",$__xv_out);
    	
    	return $__xv_out;
    }
    
    
	}

?>
