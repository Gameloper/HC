<?php
/**
	Auto generated by xproto.exe
@author
	Dany
*/
require_once("XByteArray.php");


	class XPACKET_ScheduleTimer
	{
		    public static  $_m_xcmd/*:int*/=_EMSG_LocalInterface::CMSG_ScheduleTimer;

	    
		public $bRepeating/*:UCHAR*/;
		public $milliSecond/*:INT*/;
		public $scriptfileName/*:string utf-8*/="";
		public $className/*:string utf-8*/="";
		public $params/*:string utf-8*/="";

	    
	    public function XPACKET_ScheduleTimer()
		{
	        $this->bRepeating =0;/*UCHAR*/
        $this->milliSecond =0;/*INT*/

		}
			
		public static function _Size($bRepeating/*:UCHAR*/ ,$milliSecond/*:INT*/ ,$scriptfileName/*:string utf-8*/ ,$className/*:string utf-8*/ ,$params/*:string utf-8*/ )
		{
			$__xv	= 0;
			$i		=0;

            $__xv +=4;//LENGHT
            $__xv +=4;//_m_xcmd
            $__xv +=1;//bRepeating
            $__xv +=4;//milliSecond
            $__xv +=XByteArray::StringASize($scriptfileName);
            $__xv +=XByteArray::StringASize($className);
            $__xv +=XByteArray::StringASize($params);

			return $__xv;
		}
				
		public static function _ToBuffer($__dst/*XByteArray*/,$bRepeating/*:UCHAR*/ ,$milliSecond/*:INT*/ ,$scriptfileName/*:string utf-8*/ ,$className/*:string utf-8*/ ,$params/*:string utf-8*/ )
		{
			$__xv	= 0;
			$i		=0;

			$__dst->writeInt32(XPACKET_ScheduleTimer::_Size($bRepeating/*:UCHAR*/ ,$milliSecond/*:INT*/ ,$scriptfileName/*:string utf-8*/ ,$className/*:string utf-8*/ ,$params/*:string utf-8*/ ));
			$__xv +=4;
			$__dst->writeInt32(XPACKET_ScheduleTimer::$_m_xcmd);
			$__xv +=4;

            //Write codes of bRepeating
            //
            $__dst->writeByte($bRepeating);
            $__xv +=1;

            //Write codes of milliSecond
            //
            $__dst->writeInt32($milliSecond);
            $__xv +=4;

            //Write codes of scriptfileName
            //
             $__xv += XByteArray::WriteStringA($__dst, $scriptfileName);

            //Write codes of className
            //
             $__xv += XByteArray::WriteStringA($__dst, $className);

            //Write codes of params
            //
             $__xv += XByteArray::WriteStringA($__dst, $params);

			return $__xv;
		}
		
		public static function _ClassFromParameters($bRepeating/*:UCHAR*/ ,$milliSecond/*:INT*/ ,$scriptfileName/*:string utf-8*/ ,$className/*:string utf-8*/ ,$params/*:string utf-8*/ )
		{
			$_class = new XPACKET_ScheduleTimer();

            $_class->bRepeating=$bRepeating;
            $_class->milliSecond=$milliSecond;
            $_class->scriptfileName=$scriptfileName;
            $_class->className=$className;
            $_class->params=$params;
			
			return $_class;
		}


		public function FromBuffer($__src/*:XByteArray*/)
		{
			$__xv					= 0;
			$i						=0;
			$__xvBeanSize	=0;


            //Read codes of __xvtemp1
            //
            if($__src->getBytesAvailable()>=4)
            {
                $this->__xvtemp1=$__src->readInt32();
                $__xv +=4;
            }
            else
            {
                return 0;
            }

            //Read codes of __xvtemp2
            //
            if($__src->getBytesAvailable()>=4)
            {
                $this->__xvtemp2=$__src->readInt32();
                $__xv +=4;
            }
            else
            {
                return 0;
            }

            //Read codes of bRepeating
            //
            if($__src->getBytesAvailable()>=1)
            {
                $this->bRepeating=$__src->readByte();
                $__xv +=1;
            }
            else
            {
                return 0;
            }

            //Read codes of milliSecond
            //
            if($__src->getBytesAvailable()>=4)
            {
                $this->milliSecond=$__src->readInt32();
                $__xv +=4;
            }
            else
            {
                return 0;
            }

            //Read codes of scriptfileName
            //
            $__scriptfileName_szSize	= new XInteger();
            $this->scriptfileName =XByteArray::ReadStringA($__src,$__scriptfileName_szSize);
            if($__scriptfileName_szSize->_value<=0) 
                return 0;
            $__xv +=$__scriptfileName_szSize->_value;

            //Read codes of className
            //
            $__className_szSize	= new XInteger();
            $this->className =XByteArray::ReadStringA($__src,$__className_szSize);
            if($__className_szSize->_value<=0) 
                return 0;
            $__xv +=$__className_szSize->_value;

            //Read codes of params
            //
            $__params_szSize	= new XInteger();
            $this->params =XByteArray::ReadStringA($__src,$__params_szSize);
            if($__params_szSize->_value<=0) 
                return 0;
            $__xv +=$__params_szSize->_value;

			return $__xv;
		}
		
		public function ToBuffer($__dst/*XByteArray*/)
		{
			return XPACKET_ScheduleTimer::_ToBuffer($__dst,$this->bRepeating ,$this->milliSecond ,$this->scriptfileName ,$this->className ,$this->params );
		}
		
		public function Size()
		{
			return XPACKET_ScheduleTimer::_Size($this->bRepeating ,$this->milliSecond ,$this->scriptfileName ,$this->className ,$this->params );
		}

    public  function FromXml(/*XP_XMLNODE_PTR*/ $pNode)
    {

        $this->bRepeating = XFROM_XML($this->bRepeating,$pNode,"bRepeating",0,"");
        $this->milliSecond = XFROM_XML($this->milliSecond,$pNode,"milliSecond",0,"");
        $this->scriptfileName = XFROM_XML($this->scriptfileName,$pNode,"scriptfileName",2,"");
        $this->className = XFROM_XML($this->className,$pNode,"className",2,"");
        $this->params = XFROM_XML($this->params,$pNode,"params",2,"");

		  	return 0;
    }
    
    public  function   ToXml(/*XSTRING_STREAM & out*/)
    {
        $__xv_out="";

        $__xv_out .= XTO_XML($this->bRepeating,"bRepeating",0, 0);
        $__xv_out .= XTO_XML($this->milliSecond,"milliSecond",0, 0);
        $__xv_out .= XTO_XML($this->scriptfileName,"scriptfileName",2, 0);
        $__xv_out .= XTO_XML($this->className,"className",2, 0);
        $__xv_out .= XTO_XML($this->params,"params",2, 0);

        return $__xv_out;
    }
    
    public   function fromAMFObject($pNode)
    {
       
        
        $this->bRepeating = XFROM_AMFOBJECT($this->bRepeating,$pNode,"bRepeating",0,"");
        $this->milliSecond = XFROM_AMFOBJECT($this->milliSecond,$pNode,"milliSecond",0,"");
        $this->scriptfileName = XFROM_AMFOBJECT($this->scriptfileName,$pNode,"scriptfileName",2,"");
        $this->className = XFROM_AMFOBJECT($this->className,$pNode,"className",2,"");
        $this->params = XFROM_AMFOBJECT($this->params,$pNode,"params",2,"");

        return 0;
    }
		
	private static function ParamDebugString($param)
    {
    	if (is_object($param))
    	{
    		return $param->ToDebugString();
    	}
    	else if (is_array($param))
    	{
    		$str = "(";
    		foreach($param as $p)
    		{
    			if( is_object($p) )
    			{
    				$str .= $p->ToDebugString().",";
			}
			else
			{
				$str .= strval($p).",";
			}
    		}
    		$str .= ")";
    		$str = str_replace(",)",")",$str);
    		return $str;
    	}
    	
    	return strval($param);
    } 
    
	public  function ToDebugString()
    {
    	if(XPACKET_ScheduleTimer::$_m_xcmd == _EMSG_ServerEvent::SMSG_OnSendZipData){
    		return "([ignore zip data])";
    	}
		
    	$__xv_out  = "(";
    	
        $__xv_out .= "bRepeating=".$this->ParamDebugString($this->bRepeating).",";
        $__xv_out .= "milliSecond=".$this->ParamDebugString($this->milliSecond).",";
        $__xv_out .= "scriptfileName=".$this->ParamDebugString($this->scriptfileName).",";
        $__xv_out .= "className=".$this->ParamDebugString($this->className).",";
        $__xv_out .= "params=".$this->ParamDebugString($this->params).",";

    	
    	$__xv_out  .= ")";
    	
    	$__xv_out = str_replace(",)",")",$__xv_out);
    	
    	return $__xv_out;
    }
    
   	public static function toAMFObject($__dst/*XByteArray*/,$bRepeating/*:UCHAR*/ ,$milliSecond/*:INT*/ ,$scriptfileName/*:string utf-8*/ ,$className/*:string utf-8*/ ,$params/*:string utf-8*/ )
		{
			$__xv	= 0;
			$i		=0;
      $obj = array();

        $obj["bRepeating"]=$bRepeating ;
        $obj["milliSecond"]=$milliSecond ;
        $obj["scriptfileName"]=$scriptfileName ;
        $obj["className"]=$className ;
        $obj["params"]=$params ;

      if(count($obj)>0)
      {
          $outBuffer  = WriteAMF3Object($obj);
          $__xv = strlen($outBuffer);
          $__xv+=8;
          $__dst->writeInt32($__xv);
          $__dst->writeInt32(XPACKET_ScheduleTimer::$_m_xcmd);
          $__dst->writeBinary($outBuffer,strlen($outBuffer));
      }
      else
      {
          $__xv =8;
          $__dst->writeInt32($__xv);
          $__dst->writeInt32(XPACKET_ScheduleTimer::$_m_xcmd);
      }
      
      
			return $__xv;
		}
	}
	
	
?>
