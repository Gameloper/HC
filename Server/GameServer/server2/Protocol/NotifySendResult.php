<?php
/**
	Auto generated by xproto.exe
@author
	Dany
*/
require_once("XByteArray.php");



	class NotifySendResult 
	{
		
	    
		public $PROXY_ID/*:string utf-8*/="";
		public $errorcode/*:INT*/;
		public $numSucceed/*:INT*/;
		public $numFailed/*:INT*/;

	    
		public function NotifySendResult()
		{
        $this->errorcode =0;/*INT*/
        $this->numSucceed =0;/*INT*/
        $this->numFailed =0;/*INT*/

		}
		
		public  function FromBuffer($__src/*:XByteArray*/)
		{
			$__xv  = 0;
			$i		 = 0;
			$__xvBeanSize=0;


            //Read codes of PROXY_ID
            //
            $__PROXY_ID_szSize	= new XInteger();
            $this->PROXY_ID =XByteArray::ReadStringA($__src,$__PROXY_ID_szSize);
            if($__PROXY_ID_szSize->_value<=0) 
                return 0;
            $__xv +=$__PROXY_ID_szSize->_value;

            //Read codes of errorcode
            //
            if($__src->getBytesAvailable()>=4)
            {
                $this->errorcode=$__src->readInt32();
                $__xv +=4;
            }
            else
            {
                return 0;
            }

            //Read codes of numSucceed
            //
            if($__src->getBytesAvailable()>=4)
            {
                $this->numSucceed=$__src->readInt32();
                $__xv +=4;
            }
            else
            {
                return 0;
            }

            //Read codes of numFailed
            //
            if($__src->getBytesAvailable()>=4)
            {
                $this->numFailed=$__src->readInt32();
                $__xv +=4;
            }
            else
            {
                return 0;
            }

			return $__xv;
		}
		
		public  function ToBuffer($__dst/*:XByteArray*/)
		{
			$__xv= 0;
			$i=0;


            //Write codes of this->PROXY_ID
            //
             $__xv += XByteArray::WriteStringA($__dst, $this->PROXY_ID);

            //Write codes of this->errorcode
            //
            $__dst->writeInt32($this->errorcode);
            $__xv +=4;

            //Write codes of this->numSucceed
            //
            $__dst->writeInt32($this->numSucceed);
            $__xv +=4;

            //Write codes of this->numFailed
            //
            $__dst->writeInt32($this->numFailed);
            $__xv +=4;

			return $__xv;
		}
		
		public  function Size()
		{
			$__xv	= 0;
			$i	=0;

            $__xv +=XByteArray::StringASize($this->PROXY_ID);
            $__xv +=4;//errorcode
            $__xv +=4;//numSucceed
            $__xv +=4;//numFailed

			return $__xv;
		}
   
    public  function FromXml(/*XP_XMLNODE_PTR*/ $pNode)
    {

        $this->PROXY_ID = XFROM_XML($this->PROXY_ID,$pNode,"PROXY_ID",2,"");
        $this->errorcode = XFROM_XML($this->errorcode,$pNode,"errorcode",0,"");
        $this->numSucceed = XFROM_XML($this->numSucceed,$pNode,"numSucceed",0,"");
        $this->numFailed = XFROM_XML($this->numFailed,$pNode,"numFailed",0,"");

		  	return $this;
    }
    
    public  function   ToXml(/*XSTRING_STREAM & out*/)
    {
        $__xv_out="";

        $__xv_out .= XTO_XML($this->PROXY_ID,"PROXY_ID",2, 0);
        $__xv_out .= XTO_XML($this->errorcode,"errorcode",0, 0);
        $__xv_out .= XTO_XML($this->numSucceed,"numSucceed",0, 0);
        $__xv_out .= XTO_XML($this->numFailed,"numFailed",0, 0);

        return $__xv_out;
    }

    public   function fromAMFObject($pNode)
    {
        
        $this->PROXY_ID = XFROM_AMFOBJECT($this->PROXY_ID,$pNode,"PROXY_ID",2,"");
        $this->errorcode = XFROM_AMFOBJECT($this->errorcode,$pNode,"errorcode",0,"");
        $this->numSucceed = XFROM_AMFOBJECT($this->numSucceed,$pNode,"numSucceed",0,"");
        $this->numFailed = XFROM_AMFOBJECT($this->numFailed,$pNode,"numFailed",0,"");

        return 0;
    }
    
    private static function ParamDebugString($param)
    {
    	if (is_object($param))
    	{
    		return $param->ToDebugString();
    	}
    	else if (is_array($param))
    	{
    		$str = "(";
    		foreach($param as $p)
    		{
    			if( is_object($p) )
    			{
    				$str .= $p->ToDebugString().",";
			}
			else
			{
				$str .= strval($p).",";
			}
    		}
    		$str .= ")";
    		$str = str_replace(",)",")",$str);
    		return $str;
    	}
    	
    	return strval($param);
    } 
    
	public  function ToDebugString()
    {
    	$__xv_out  = "(";
    	
        $__xv_out .= "PROXY_ID=".$this->ParamDebugString($this->PROXY_ID).",";
        $__xv_out .= "errorcode=".$this->ParamDebugString($this->errorcode).",";
        $__xv_out .= "numSucceed=".$this->ParamDebugString($this->numSucceed).",";
        $__xv_out .= "numFailed=".$this->ParamDebugString($this->numFailed).",";

    	
    	$__xv_out  .= ")";
    	
    	$__xv_out = str_replace(",)",")",$__xv_out);
    	
    	return $__xv_out;
    }
    
    
	}

?>
