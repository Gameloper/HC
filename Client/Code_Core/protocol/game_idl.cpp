
/**
	Auto generated by xproto.exe
	@author 
	eboz
*/

#include <stdio.h>
#ifdef WIN32
#include <windows.h>
#else

#endif
#include "game_idl.h"
using namespace Legend;






const char* _EINTERNAL_NOTIFY_BY_PROXY_A::s_szEnumNames[]={
"CLIENT_DISCONNECT",
"CLIENT_NOT_EXIST_WHEN_RESPONSE",
"CLIENT_WRITE_ERROR",
"CLIENT_SOCKET_DEAD_ALREADY",

};

const char* _EINTERNAL_NOTIFY_BY_PROXY_A::GetName(_EINTERNAL_NOTIFY_BY_PROXY_A::E _lpValue)
{
	switch(_lpValue){
        case CLIENT_DISCONNECT                       : return s_szEnumNames[         0];
        case CLIENT_NOT_EXIST_WHEN_RESPONSE          : return s_szEnumNames[         1];
        case CLIENT_WRITE_ERROR                      : return s_szEnumNames[         2];
        case CLIENT_SOCKET_DEAD_ALREADY              : return s_szEnumNames[         3];

	};
	return NULL;
}
//--------------------------------------------------------------
const char* _ECOMMON_SERVER_ERROR_A::s_szEnumNames[]={
"SUCCESS",
"PROXY_FASTCGI_INTERAL_ERROR",
"PROXY_SENDTO_FCGI_FAILED_TOO_MUCH",
"PROXY_FCGI_REQUEST_TIMEOUT",
"PROXY_FCGI_UNAVAILABLE",
"KICKED_OUT_BY_OTHER_DUPLICATED_LOGIN",
"KICKED_OUT_FOR_IDLE_TOO_LONG",
"KICKED_OUT_FOR_BAD_STATE_NOT_LOGIN_YET",
"KICKED_OUT_FOR_BAD_STATE_LOING_ALREADY",
"SERVER_UNDER_MAINTAIN",

};

const char* _ECOMMON_SERVER_ERROR_A::GetName(_ECOMMON_SERVER_ERROR_A::E _lpValue)
{
	switch(_lpValue){
        case SUCCESS                                 : return s_szEnumNames[         0];
        case PROXY_FASTCGI_INTERAL_ERROR             : return s_szEnumNames[         1];
        case PROXY_SENDTO_FCGI_FAILED_TOO_MUCH       : return s_szEnumNames[         2];
        case PROXY_FCGI_REQUEST_TIMEOUT              : return s_szEnumNames[         3];
        case PROXY_FCGI_UNAVAILABLE                  : return s_szEnumNames[         4];
        case KICKED_OUT_BY_OTHER_DUPLICATED_LOGIN    : return s_szEnumNames[         5];
        case KICKED_OUT_FOR_IDLE_TOO_LONG            : return s_szEnumNames[         6];
        case KICKED_OUT_FOR_BAD_STATE_NOT_LOGIN_YET  : return s_szEnumNames[         7];
        case KICKED_OUT_FOR_BAD_STATE_LOING_ALREADY  : return s_szEnumNames[         8];
        case SERVER_UNDER_MAINTAIN                   : return s_szEnumNames[         9];

	};
	return NULL;
}
//--------------------------------------------------------------
const char* _EMSG_ServerInterface::s_szEnumNames[]={
"CMSG_DoLogin",
"CMSG_SendInternalNotifyByProxy",
"CMSG_OnKickout",
"CMSG_SendPing",
"CMSG_SendProtoBuff",
"CMSG_MAX",

};

const char* _EMSG_ServerInterface::GetName(_EMSG_ServerInterface::E _lpValue)
{
	switch(_lpValue){
        case CMSG_DoLogin                            : return s_szEnumNames[         0];
        case CMSG_SendInternalNotifyByProxy          : return s_szEnumNames[         1];
        case CMSG_OnKickout                          : return s_szEnumNames[         2];
        case CMSG_SendPing                           : return s_szEnumNames[         3];
        case CMSG_SendProtoBuff                      : return s_szEnumNames[         4];
        case CMSG_MAX                                : return s_szEnumNames[         5];

	};
	return NULL;
}
//--------------------------------------------------------------
const char* _EMSG_ServerEvent::s_szEnumNames[]={
"SMSG_OnServerErrorMessage",
"SMSG_OnSendZipData",
"SMSG_OnPong",
"SMSG_OnProtoReponse",
"SMSG_MAX",

};

const char* _EMSG_ServerEvent::GetName(_EMSG_ServerEvent::E _lpValue)
{
	switch(_lpValue){
        case SMSG_OnServerErrorMessage               : return s_szEnumNames[         0];
        case SMSG_OnSendZipData                      : return s_szEnumNames[         1];
        case SMSG_OnPong                             : return s_szEnumNames[         2];
        case SMSG_OnProtoReponse                     : return s_szEnumNames[         3];
        case SMSG_MAX                                : return s_szEnumNames[         4];

	};
	return NULL;
}
//--------------------------------------------------------------
INT XPACKET_DoLogin::_Size(std::string&  userId,std::string&  server,std::string&  sessionKey,std::string&  version)
{
		INT __xv =0;

        __xv +=XSIZE_OF(__xv);//LENGHT
        __xv +=XSIZE_OF(_m_xcmd);
        __xv +=XSIZE_OF(userId);
        __xv +=XSIZE_OF(server);
        __xv +=XSIZE_OF(sessionKey);
        __xv +=XSIZE_OF(version);

		return __xv;
}

INT  XPACKET_DoLogin::_FromBuffer(const char *__src,INT    __len,std::string&  userId,std::string&  server,std::string&  sessionKey,std::string&  version)
{
		INT __xv=0;

        INT __xvdummytemp=0;
        XFROM_BUFFER_SAFE(__xvdummytemp,__src+__xv,__len-__xv,__xv);
        XFROM_BUFFER_SAFE(__xvdummytemp,__src+__xv,__len-__xv,__xv);
        XFROM_BUFFER_SAFE(userId,__src+__xv,__len-__xv,__xv);
        XFROM_BUFFER_SAFE(server,__src+__xv,__len-__xv,__xv);
        XFROM_BUFFER_SAFE(sessionKey,__src+__xv,__len-__xv,__xv);
        XFROM_BUFFER_SAFE(version,__src+__xv,__len-__xv,__xv);

		return __xv;
}

INT  XPACKET_DoLogin::_ToBuffer(char *__dst,INT    __len,std::string&  userId,std::string&  server,std::string&  sessionKey,std::string&  version)
{
		INT __xv=0;

        INT __xvPacketLen=_Size(userId ,server ,sessionKey ,version );
        XTO_BUFFER_SAFE(__xvPacketLen,__dst+__xv,__len-__xv,__xv);
        XTO_BUFFER_SAFE(_m_xcmd,__dst+__xv,__len-__xv,__xv);
        XTO_BUFFER_SAFE(userId,__dst+__xv,__len-__xv,__xv);
        XTO_BUFFER_SAFE(server,__dst+__xv,__len-__xv,__xv);
        XTO_BUFFER_SAFE(sessionKey,__dst+__xv,__len-__xv,__xv);
        XTO_BUFFER_SAFE(version,__dst+__xv,__len-__xv,__xv);

		return __xv;
}


INT  XPACKET_DoLogin:: Size()
{
		return XPACKET_DoLogin::_Size(userId ,server ,sessionKey ,version );
}
	
INT  XPACKET_DoLogin::FromBuffer(const char *__src,INT    __len)
{
		return XPACKET_DoLogin::_FromBuffer(__src,__len,userId ,server ,sessionKey ,version );
}
	
INT  XPACKET_DoLogin::ToBuffer(char *__dst,INT    __len)
{
		return XPACKET_DoLogin::_ToBuffer(__dst,__len,userId ,server ,sessionKey ,version );
}

#if !defined(CC_TARGET_OS_IPHONE) && !defined(CC_TARGET_OS_MAC) && !defined(ANDROID)

INT  XPACKET_DoLogin::FromXml(XP_XMLNODE_PTR pNode)
{

        XFROM_XML( userId,pNode,_T("userId" ),0);
        XFROM_XML( server,pNode,_T("server" ),0);
        XFROM_XML( sessionKey,pNode,_T("sessionKey" ),0);
        XFROM_XML( version,pNode,_T("version" ),0);

	    return 0;
}
INT  XPACKET_DoLogin::ToXml(XSTRING_STREAM & out)
{

        XTO_XML( userId,out,_T("userId") );
        XTO_XML( server,out,_T("server") );
        XTO_XML( sessionKey,out,_T("sessionKey") );
        XTO_XML( version,out,_T("version") );

	    return 0;
}
#endif //#if !defined(CC_TARGET_OS_IPHONE) && !defined(CC_TARGET_OS_MAC) && !defined(ANDROID)
//---------------------------------------------------------------------------------------------


INT XPACKET_SendInternalNotifyByProxy::_Size(int&  action)
{
		INT __xv =0;

        __xv +=XSIZE_OF(__xv);//LENGHT
        __xv +=XSIZE_OF(_m_xcmd);
        __xv +=XSIZE_OF(action);

		return __xv;
}

INT  XPACKET_SendInternalNotifyByProxy::_FromBuffer(const char *__src,INT    __len,int&  action)
{
		INT __xv=0;

        INT __xvdummytemp=0;
        XFROM_BUFFER_SAFE(__xvdummytemp,__src+__xv,__len-__xv,__xv);
        XFROM_BUFFER_SAFE(__xvdummytemp,__src+__xv,__len-__xv,__xv);
        XFROM_BUFFER_SAFE(action,__src+__xv,__len-__xv,__xv);

		return __xv;
}

INT  XPACKET_SendInternalNotifyByProxy::_ToBuffer(char *__dst,INT    __len,int&  action)
{
		INT __xv=0;

        INT __xvPacketLen=_Size(action );
        XTO_BUFFER_SAFE(__xvPacketLen,__dst+__xv,__len-__xv,__xv);
        XTO_BUFFER_SAFE(_m_xcmd,__dst+__xv,__len-__xv,__xv);
        XTO_BUFFER_SAFE(action,__dst+__xv,__len-__xv,__xv);

		return __xv;
}


INT  XPACKET_SendInternalNotifyByProxy:: Size()
{
		return XPACKET_SendInternalNotifyByProxy::_Size(action );
}
	
INT  XPACKET_SendInternalNotifyByProxy::FromBuffer(const char *__src,INT    __len)
{
		return XPACKET_SendInternalNotifyByProxy::_FromBuffer(__src,__len,action );
}
	
INT  XPACKET_SendInternalNotifyByProxy::ToBuffer(char *__dst,INT    __len)
{
		return XPACKET_SendInternalNotifyByProxy::_ToBuffer(__dst,__len,action );
}

#if !defined(CC_TARGET_OS_IPHONE) && !defined(CC_TARGET_OS_MAC) && !defined(ANDROID)

INT  XPACKET_SendInternalNotifyByProxy::FromXml(XP_XMLNODE_PTR pNode)
{

        XFROM_XML( action,pNode,_T("action" ),0);

	    return 0;
}
INT  XPACKET_SendInternalNotifyByProxy::ToXml(XSTRING_STREAM & out)
{

        XTO_XML( action,out,_T("action") );

	    return 0;
}
#endif //#if !defined(CC_TARGET_OS_IPHONE) && !defined(CC_TARGET_OS_MAC) && !defined(ANDROID)
//---------------------------------------------------------------------------------------------


INT XPACKET_OnKickout::_Size(int&  error_code)
{
		INT __xv =0;

        __xv +=XSIZE_OF(__xv);//LENGHT
        __xv +=XSIZE_OF(_m_xcmd);
        __xv +=XSIZE_OF(error_code);

		return __xv;
}

INT  XPACKET_OnKickout::_FromBuffer(const char *__src,INT    __len,int&  error_code)
{
		INT __xv=0;

        INT __xvdummytemp=0;
        XFROM_BUFFER_SAFE(__xvdummytemp,__src+__xv,__len-__xv,__xv);
        XFROM_BUFFER_SAFE(__xvdummytemp,__src+__xv,__len-__xv,__xv);
        XFROM_BUFFER_SAFE(error_code,__src+__xv,__len-__xv,__xv);

		return __xv;
}

INT  XPACKET_OnKickout::_ToBuffer(char *__dst,INT    __len,int&  error_code)
{
		INT __xv=0;

        INT __xvPacketLen=_Size(error_code );
        XTO_BUFFER_SAFE(__xvPacketLen,__dst+__xv,__len-__xv,__xv);
        XTO_BUFFER_SAFE(_m_xcmd,__dst+__xv,__len-__xv,__xv);
        XTO_BUFFER_SAFE(error_code,__dst+__xv,__len-__xv,__xv);

		return __xv;
}


INT  XPACKET_OnKickout:: Size()
{
		return XPACKET_OnKickout::_Size(error_code );
}
	
INT  XPACKET_OnKickout::FromBuffer(const char *__src,INT    __len)
{
		return XPACKET_OnKickout::_FromBuffer(__src,__len,error_code );
}
	
INT  XPACKET_OnKickout::ToBuffer(char *__dst,INT    __len)
{
		return XPACKET_OnKickout::_ToBuffer(__dst,__len,error_code );
}

#if !defined(CC_TARGET_OS_IPHONE) && !defined(CC_TARGET_OS_MAC) && !defined(ANDROID)

INT  XPACKET_OnKickout::FromXml(XP_XMLNODE_PTR pNode)
{

        XFROM_XML( error_code,pNode,_T("error_code" ),0);

	    return 0;
}
INT  XPACKET_OnKickout::ToXml(XSTRING_STREAM & out)
{

        XTO_XML( error_code,out,_T("error_code") );

	    return 0;
}
#endif //#if !defined(CC_TARGET_OS_IPHONE) && !defined(CC_TARGET_OS_MAC) && !defined(ANDROID)
//---------------------------------------------------------------------------------------------


INT XPACKET_SendPing::_Size(std::string&  time)
{
		INT __xv =0;

        __xv +=XSIZE_OF(__xv);//LENGHT
        __xv +=XSIZE_OF(_m_xcmd);
        __xv +=XSIZE_OF(time);

		return __xv;
}

INT  XPACKET_SendPing::_FromBuffer(const char *__src,INT    __len,std::string&  time)
{
		INT __xv=0;

        INT __xvdummytemp=0;
        XFROM_BUFFER_SAFE(__xvdummytemp,__src+__xv,__len-__xv,__xv);
        XFROM_BUFFER_SAFE(__xvdummytemp,__src+__xv,__len-__xv,__xv);
        XFROM_BUFFER_SAFE(time,__src+__xv,__len-__xv,__xv);

		return __xv;
}

INT  XPACKET_SendPing::_ToBuffer(char *__dst,INT    __len,std::string&  time)
{
		INT __xv=0;

        INT __xvPacketLen=_Size(time );
        XTO_BUFFER_SAFE(__xvPacketLen,__dst+__xv,__len-__xv,__xv);
        XTO_BUFFER_SAFE(_m_xcmd,__dst+__xv,__len-__xv,__xv);
        XTO_BUFFER_SAFE(time,__dst+__xv,__len-__xv,__xv);

		return __xv;
}


INT  XPACKET_SendPing:: Size()
{
		return XPACKET_SendPing::_Size(time );
}
	
INT  XPACKET_SendPing::FromBuffer(const char *__src,INT    __len)
{
		return XPACKET_SendPing::_FromBuffer(__src,__len,time );
}
	
INT  XPACKET_SendPing::ToBuffer(char *__dst,INT    __len)
{
		return XPACKET_SendPing::_ToBuffer(__dst,__len,time );
}

#if !defined(CC_TARGET_OS_IPHONE) && !defined(CC_TARGET_OS_MAC) && !defined(ANDROID)

INT  XPACKET_SendPing::FromXml(XP_XMLNODE_PTR pNode)
{

        XFROM_XML( time,pNode,_T("time" ),0);

	    return 0;
}
INT  XPACKET_SendPing::ToXml(XSTRING_STREAM & out)
{

        XTO_XML( time,out,_T("time") );

	    return 0;
}
#endif //#if !defined(CC_TARGET_OS_IPHONE) && !defined(CC_TARGET_OS_MAC) && !defined(ANDROID)
//---------------------------------------------------------------------------------------------


INT XPACKET_SendProtoBuff::_Size(std::vector<unsigned char>&  data)
{
		INT __xv =0;

        __xv +=XSIZE_OF(__xv);//LENGHT
        __xv +=XSIZE_OF(_m_xcmd);
        __xv +=XSIZE_OF_DA_SIMPLE(data);

		return __xv;
}

INT  XPACKET_SendProtoBuff::_FromBuffer(const char *__src,INT    __len,std::vector<unsigned char>&  data)
{
		INT __xv=0;

        INT __xvdummytemp=0;
        XFROM_BUFFER_SAFE(__xvdummytemp,__src+__xv,__len-__xv,__xv);
        XFROM_BUFFER_SAFE(__xvdummytemp,__src+__xv,__len-__xv,__xv);
        XFROM_BUFFER_DA_SIMPLE_SAFE(data,__src+__xv,__len-__xv,__xv);

		return __xv;
}

INT  XPACKET_SendProtoBuff::_ToBuffer(char *__dst,INT    __len,std::vector<unsigned char>&  data)
{
		INT __xv=0;

        INT __xvPacketLen=_Size(data );
        XTO_BUFFER_SAFE(__xvPacketLen,__dst+__xv,__len-__xv,__xv);
        XTO_BUFFER_SAFE(_m_xcmd,__dst+__xv,__len-__xv,__xv);
        XTO_BUFFER_DA_SIMPLE_SAFE(data,__dst+__xv,__len-__xv,__xv);

		return __xv;
}


INT  XPACKET_SendProtoBuff:: Size()
{
		return XPACKET_SendProtoBuff::_Size(data );
}
	
INT  XPACKET_SendProtoBuff::FromBuffer(const char *__src,INT    __len)
{
		return XPACKET_SendProtoBuff::_FromBuffer(__src,__len,data );
}
	
INT  XPACKET_SendProtoBuff::ToBuffer(char *__dst,INT    __len)
{
		return XPACKET_SendProtoBuff::_ToBuffer(__dst,__len,data );
}

#if !defined(CC_TARGET_OS_IPHONE) && !defined(CC_TARGET_OS_MAC) && !defined(ANDROID)

INT  XPACKET_SendProtoBuff::FromXml(XP_XMLNODE_PTR pNode)
{

        XFROM_XML(data,pNode,_T("data"),0);

	    return 0;
}
INT  XPACKET_SendProtoBuff::ToXml(XSTRING_STREAM & out)
{

        XTO_XML(data,out,_T("data"));

	    return 0;
}
#endif //#if !defined(CC_TARGET_OS_IPHONE) && !defined(CC_TARGET_OS_MAC) && !defined(ANDROID)
//---------------------------------------------------------------------------------------------


INT XPACKET_OnServerErrorMessage::_Size(int&  error_code,std::string&  lpszMsg)
{
		INT __xv =0;

        __xv +=XSIZE_OF(__xv);//LENGHT
        __xv +=XSIZE_OF(_m_xcmd);
        __xv +=XSIZE_OF(error_code);
        __xv +=XSIZE_OF(lpszMsg);

		return __xv;
}

INT  XPACKET_OnServerErrorMessage::_FromBuffer(const char *__src,INT    __len,int&  error_code,std::string&  lpszMsg)
{
		INT __xv=0;

        INT __xvdummytemp=0;
        XFROM_BUFFER_SAFE(__xvdummytemp,__src+__xv,__len-__xv,__xv);
        XFROM_BUFFER_SAFE(__xvdummytemp,__src+__xv,__len-__xv,__xv);
        XFROM_BUFFER_SAFE(error_code,__src+__xv,__len-__xv,__xv);
        XFROM_BUFFER_SAFE(lpszMsg,__src+__xv,__len-__xv,__xv);

		return __xv;
}

INT  XPACKET_OnServerErrorMessage::_ToBuffer(char *__dst,INT    __len,int&  error_code,std::string&  lpszMsg)
{
		INT __xv=0;

        INT __xvPacketLen=_Size(error_code ,lpszMsg );
        XTO_BUFFER_SAFE(__xvPacketLen,__dst+__xv,__len-__xv,__xv);
        XTO_BUFFER_SAFE(_m_xcmd,__dst+__xv,__len-__xv,__xv);
        XTO_BUFFER_SAFE(error_code,__dst+__xv,__len-__xv,__xv);
        XTO_BUFFER_SAFE(lpszMsg,__dst+__xv,__len-__xv,__xv);

		return __xv;
}


INT  XPACKET_OnServerErrorMessage:: Size()
{
		return XPACKET_OnServerErrorMessage::_Size(error_code ,lpszMsg );
}
	
INT  XPACKET_OnServerErrorMessage::FromBuffer(const char *__src,INT    __len)
{
		return XPACKET_OnServerErrorMessage::_FromBuffer(__src,__len,error_code ,lpszMsg );
}
	
INT  XPACKET_OnServerErrorMessage::ToBuffer(char *__dst,INT    __len)
{
		return XPACKET_OnServerErrorMessage::_ToBuffer(__dst,__len,error_code ,lpszMsg );
}

#if !defined(CC_TARGET_OS_IPHONE) && !defined(CC_TARGET_OS_MAC) && !defined(ANDROID)

INT  XPACKET_OnServerErrorMessage::FromXml(XP_XMLNODE_PTR pNode)
{

        XFROM_XML( error_code,pNode,_T("error_code" ),0);
        XFROM_XML( lpszMsg,pNode,_T("lpszMsg" ),0);

	    return 0;
}
INT  XPACKET_OnServerErrorMessage::ToXml(XSTRING_STREAM & out)
{

        XTO_XML( error_code,out,_T("error_code") );
        XTO_XML( lpszMsg,out,_T("lpszMsg") );

	    return 0;
}
#endif //#if !defined(CC_TARGET_OS_IPHONE) && !defined(CC_TARGET_OS_MAC) && !defined(ANDROID)
//---------------------------------------------------------------------------------------------


INT XPACKET_OnSendZipData::_Size(std::vector<unsigned char>&  zipData)
{
		INT __xv =0;

        __xv +=XSIZE_OF(__xv);//LENGHT
        __xv +=XSIZE_OF(_m_xcmd);
        __xv +=XSIZE_OF_DA_SIMPLE(zipData);

		return __xv;
}

INT  XPACKET_OnSendZipData::_FromBuffer(const char *__src,INT    __len,std::vector<unsigned char>&  zipData)
{
		INT __xv=0;

        INT __xvdummytemp=0;
        XFROM_BUFFER_SAFE(__xvdummytemp,__src+__xv,__len-__xv,__xv);
        XFROM_BUFFER_SAFE(__xvdummytemp,__src+__xv,__len-__xv,__xv);
        XFROM_BUFFER_DA_SIMPLE_SAFE(zipData,__src+__xv,__len-__xv,__xv);

		return __xv;
}

INT  XPACKET_OnSendZipData::_ToBuffer(char *__dst,INT    __len,std::vector<unsigned char>&  zipData)
{
		INT __xv=0;

        INT __xvPacketLen=_Size(zipData );
        XTO_BUFFER_SAFE(__xvPacketLen,__dst+__xv,__len-__xv,__xv);
        XTO_BUFFER_SAFE(_m_xcmd,__dst+__xv,__len-__xv,__xv);
        XTO_BUFFER_DA_SIMPLE_SAFE(zipData,__dst+__xv,__len-__xv,__xv);

		return __xv;
}


INT  XPACKET_OnSendZipData:: Size()
{
		return XPACKET_OnSendZipData::_Size(zipData );
}
	
INT  XPACKET_OnSendZipData::FromBuffer(const char *__src,INT    __len)
{
		return XPACKET_OnSendZipData::_FromBuffer(__src,__len,zipData );
}
	
INT  XPACKET_OnSendZipData::ToBuffer(char *__dst,INT    __len)
{
		return XPACKET_OnSendZipData::_ToBuffer(__dst,__len,zipData );
}

#if !defined(CC_TARGET_OS_IPHONE) && !defined(CC_TARGET_OS_MAC) && !defined(ANDROID)

INT  XPACKET_OnSendZipData::FromXml(XP_XMLNODE_PTR pNode)
{

        XFROM_XML(zipData,pNode,_T("zipData"),0);

	    return 0;
}
INT  XPACKET_OnSendZipData::ToXml(XSTRING_STREAM & out)
{

        XTO_XML(zipData,out,_T("zipData"));

	    return 0;
}
#endif //#if !defined(CC_TARGET_OS_IPHONE) && !defined(CC_TARGET_OS_MAC) && !defined(ANDROID)
//---------------------------------------------------------------------------------------------


INT XPACKET_OnPong::_Size(std::string&  time)
{
		INT __xv =0;

        __xv +=XSIZE_OF(__xv);//LENGHT
        __xv +=XSIZE_OF(_m_xcmd);
        __xv +=XSIZE_OF(time);

		return __xv;
}

INT  XPACKET_OnPong::_FromBuffer(const char *__src,INT    __len,std::string&  time)
{
		INT __xv=0;

        INT __xvdummytemp=0;
        XFROM_BUFFER_SAFE(__xvdummytemp,__src+__xv,__len-__xv,__xv);
        XFROM_BUFFER_SAFE(__xvdummytemp,__src+__xv,__len-__xv,__xv);
        XFROM_BUFFER_SAFE(time,__src+__xv,__len-__xv,__xv);

		return __xv;
}

INT  XPACKET_OnPong::_ToBuffer(char *__dst,INT    __len,std::string&  time)
{
		INT __xv=0;

        INT __xvPacketLen=_Size(time );
        XTO_BUFFER_SAFE(__xvPacketLen,__dst+__xv,__len-__xv,__xv);
        XTO_BUFFER_SAFE(_m_xcmd,__dst+__xv,__len-__xv,__xv);
        XTO_BUFFER_SAFE(time,__dst+__xv,__len-__xv,__xv);

		return __xv;
}


INT  XPACKET_OnPong:: Size()
{
		return XPACKET_OnPong::_Size(time );
}
	
INT  XPACKET_OnPong::FromBuffer(const char *__src,INT    __len)
{
		return XPACKET_OnPong::_FromBuffer(__src,__len,time );
}
	
INT  XPACKET_OnPong::ToBuffer(char *__dst,INT    __len)
{
		return XPACKET_OnPong::_ToBuffer(__dst,__len,time );
}

#if !defined(CC_TARGET_OS_IPHONE) && !defined(CC_TARGET_OS_MAC) && !defined(ANDROID)

INT  XPACKET_OnPong::FromXml(XP_XMLNODE_PTR pNode)
{

        XFROM_XML( time,pNode,_T("time" ),0);

	    return 0;
}
INT  XPACKET_OnPong::ToXml(XSTRING_STREAM & out)
{

        XTO_XML( time,out,_T("time") );

	    return 0;
}
#endif //#if !defined(CC_TARGET_OS_IPHONE) && !defined(CC_TARGET_OS_MAC) && !defined(ANDROID)
//---------------------------------------------------------------------------------------------


INT XPACKET_OnProtoReponse::_Size(int&  error_code,std::vector<unsigned char>&  data)
{
		INT __xv =0;

        __xv +=XSIZE_OF(__xv);//LENGHT
        __xv +=XSIZE_OF(_m_xcmd);
        __xv +=XSIZE_OF(error_code);
        __xv +=XSIZE_OF_DA_SIMPLE(data);

		return __xv;
}

INT  XPACKET_OnProtoReponse::_FromBuffer(const char *__src,INT    __len,int&  error_code,std::vector<unsigned char>&  data)
{
		INT __xv=0;

        INT __xvdummytemp=0;
        XFROM_BUFFER_SAFE(__xvdummytemp,__src+__xv,__len-__xv,__xv);
        XFROM_BUFFER_SAFE(__xvdummytemp,__src+__xv,__len-__xv,__xv);
        XFROM_BUFFER_SAFE(error_code,__src+__xv,__len-__xv,__xv);
        XFROM_BUFFER_DA_SIMPLE_SAFE(data,__src+__xv,__len-__xv,__xv);

		return __xv;
}

INT  XPACKET_OnProtoReponse::_ToBuffer(char *__dst,INT    __len,int&  error_code,std::vector<unsigned char>&  data)
{
		INT __xv=0;

        INT __xvPacketLen=_Size(error_code ,data );
        XTO_BUFFER_SAFE(__xvPacketLen,__dst+__xv,__len-__xv,__xv);
        XTO_BUFFER_SAFE(_m_xcmd,__dst+__xv,__len-__xv,__xv);
        XTO_BUFFER_SAFE(error_code,__dst+__xv,__len-__xv,__xv);
        XTO_BUFFER_DA_SIMPLE_SAFE(data,__dst+__xv,__len-__xv,__xv);

		return __xv;
}


INT  XPACKET_OnProtoReponse:: Size()
{
		return XPACKET_OnProtoReponse::_Size(error_code ,data );
}
	
INT  XPACKET_OnProtoReponse::FromBuffer(const char *__src,INT    __len)
{
		return XPACKET_OnProtoReponse::_FromBuffer(__src,__len,error_code ,data );
}
	
INT  XPACKET_OnProtoReponse::ToBuffer(char *__dst,INT    __len)
{
		return XPACKET_OnProtoReponse::_ToBuffer(__dst,__len,error_code ,data );
}

#if !defined(CC_TARGET_OS_IPHONE) && !defined(CC_TARGET_OS_MAC) && !defined(ANDROID)

INT  XPACKET_OnProtoReponse::FromXml(XP_XMLNODE_PTR pNode)
{

        XFROM_XML( error_code,pNode,_T("error_code" ),0);
        XFROM_XML(data,pNode,_T("data"),0);

	    return 0;
}
INT  XPACKET_OnProtoReponse::ToXml(XSTRING_STREAM & out)
{

        XTO_XML( error_code,out,_T("error_code") );
        XTO_XML(data,out,_T("data"));

	    return 0;
}
#endif //#if !defined(CC_TARGET_OS_IPHONE) && !defined(CC_TARGET_OS_MAC) && !defined(ANDROID)
//---------------------------------------------------------------------------------------------

